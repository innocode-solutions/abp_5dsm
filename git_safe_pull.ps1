# Script para fazer pull seguro sem perder altera√ß√µes
Write-Host "üîÑ Fazendo pull seguro..." -ForegroundColor Green
Write-Host "=" * 50

# 1. Fazer backup das altera√ß√µes locais
Write-Host "1Ô∏è‚É£ Fazendo backup das altera√ß√µes locais..." -ForegroundColor Yellow
git stash push -m "Backup antes do pull - $(Get-Date)"

# 2. Fazer pull com estrat√©gia que preserva altera√ß√µes
Write-Host "2Ô∏è‚É£ Fazendo pull com estrat√©gia segura..." -ForegroundColor Yellow
try {
    git pull --no-edit --strategy=recursive -X ours origin main
    Write-Host "‚úÖ Pull realizado com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Houve conflitos, resolvendo automaticamente..." -ForegroundColor Yellow
    
    # 3. Resolver conflitos automaticamente
    Write-Host "3Ô∏è‚É£ Resolvendo conflitos..." -ForegroundColor Yellow
    & .\resolve_conflicts.ps1
    
    # 4. Adicionar arquivos resolvidos
    git add .
    
    # 5. Fazer commit da resolu√ß√£o
    git commit -m "resolve: resolver conflitos de merge automaticamente"
    
    Write-Host "‚úÖ Conflitos resolvidos automaticamente!" -ForegroundColor Green
}

# 6. Restaurar altera√ß√µes locais se necess√°rio
Write-Host "4Ô∏è‚É£ Verificando se h√° altera√ß√µes para restaurar..." -ForegroundColor Yellow
$stashList = git stash list
if ($stashList -match "Backup antes do pull") {
    Write-Host "‚ö†Ô∏è H√° altera√ß√µes em stash. Execute 'git stash pop' se necess√°rio." -ForegroundColor Yellow
    Write-Host "   Para ver as altera√ß√µes: git stash show -p" -ForegroundColor Cyan
}

Write-Host "`nüéâ Pull seguro conclu√≠do!" -ForegroundColor Green
Write-Host "‚úÖ Todas as altera√ß√µes foram preservadas!" -ForegroundColor Green
