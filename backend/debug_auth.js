// Script para debugar problemas de autentica√ß√£o
const axios = require('axios');
const bcrypt = require('bcrypt');

const BASE_URL = 'http://localhost:3000/api';

async function debugAuth() {
  console.log('üîç DEBUGANDO PROBLEMAS DE AUTENTICA√á√ÉO\n');
  
  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('1Ô∏è‚É£ Verificando servidor...');
    try {
      const healthResponse = await axios.get(`${BASE_URL}/health`);
      console.log('‚úÖ Servidor est√° rodando');
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° rodando ou n√£o est√° acess√≠vel');
      console.log('üí° Execute: npm run dev');
      return;
    }

    // 2. Tentar registrar um novo usu√°rio
    console.log('\n2Ô∏è‚É£ Tentando registrar novo usu√°rio...');
    const testEmail = `teste${Date.now()}@example.com`;
    const testPassword = '123456';
    
    try {
      const registerResponse = await axios.post(`${BASE_URL}/auth/register`, {
        Email: testEmail,
        PasswordHash: testPassword,
        name: 'Usu√°rio Teste',
        Role: 'STUDENT'
      });
      console.log('‚úÖ Usu√°rio registrado com sucesso');
      console.log(`üìß Email: ${testEmail}`);
    } catch (error) {
      console.log('‚ùå Erro ao registrar usu√°rio:', error.response?.data);
      return;
    }

    // 3. Tentar fazer login
    console.log('\n3Ô∏è‚É£ Tentando fazer login...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
        Email: testEmail,
        password: testPassword
      });
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('üîë Token recebido:', loginResponse.data.token ? 'SIM' : 'N√ÉO');
      return;
    } catch (error) {
      console.log('‚ùå Erro no login:', error.response?.data);
      
      // 4. Verificar se o usu√°rio foi criado no banco
      console.log('\n4Ô∏è‚É£ Verificando se usu√°rio existe no banco...');
      try {
        // Tentar acessar endpoint que lista usu√°rios (se for admin)
        const usersResponse = await axios.get(`${BASE_URL}/users`);
        console.log('‚úÖ Conseguiu acessar lista de usu√°rios');
      } catch (error) {
        console.log('‚ö†Ô∏è N√£o conseguiu acessar lista de usu√°rios (normal se n√£o for admin)');
      }
    }

    // 5. Testar com usu√°rio existente
    console.log('\n5Ô∏è‚É£ Testando com usu√°rio existente...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
        Email: 'teste@example.com',
        password: '123456'
      });
      console.log('‚úÖ Login com usu√°rio existente funcionou!');
    } catch (error) {
      console.log('‚ùå Login com usu√°rio existente falhou:', error.response?.data);
      
      // 6. Verificar hash da senha
      console.log('\n6Ô∏è‚É£ Verificando hash da senha...');
      const hashedPassword = await bcrypt.hash('123456', 12);
      console.log('üîê Hash da senha "123456":', hashedPassword);
      console.log('üí° Verifique se a senha est√° sendo hasheada corretamente no registro');
    }

  } catch (error) {
    console.log('‚ùå Erro geral:', error.message);
  }
}

debugAuth();
